// <auto-generated />
using System;
using Cafe.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cafe.Infrastructure.EF.Migrations
{
    [DbContext(typeof(CafeDBContext))]
    [Migration("20250703220734_Audiable-Nullable")]
    partial class AudiableNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cafe.Domain.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<TimeOnly>("CloseAt")
                        .HasColumnType("time");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Location")
                        .HasColumnType("tinyint");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("OpenAt")
                        .HasColumnType("time");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "123 Main St",
                            CloseAt = new TimeOnly(18, 0, 0),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = (byte)2,
                            ManagerName = "Alice",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenAt = new TimeOnly(8, 0, 0),
                            Phone = "01212345678"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "456 Side St",
                            CloseAt = new TimeOnly(17, 0, 0),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = (byte)4,
                            ManagerName = "Bob",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OpenAt = new TimeOnly(9, 0, 0),
                            Phone = "01012345678"
                        });
                });

            modelBuilder.Entity("Cafe.Domain.BranchSupplier", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("HistoryOfDeal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastDeal")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BranchId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BranchesSupplier");

                    b.HasData(
                        new
                        {
                            BranchId = new Guid("11111111-1111-1111-1111-111111111111"),
                            SupplierId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HistoryOfDeal = "[]",
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            LastDeal = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("Email");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            BranchId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            HireDate = new DateOnly(2022, 1, 10),
                            IsActive = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "John Doe",
                            Phone = "john.doe@example.com",
                            Role = (byte)2
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            BranchId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            HireDate = new DateOnly(2023, 2, 15),
                            IsActive = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jane Smith",
                            Phone = "jane.smith@example.com",
                            Role = (byte)3
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuName = "Breakfast",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuName = "Lunch",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("OrderedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderedOn");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9999999-aaaa-aaaa-9999-99999999999a"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = (byte)1,
                            OrderedOn = new DateTime(2024, 6, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TableId = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            TotalMoney = 100.0
                        },
                        new
                        {
                            Id = new Guid("b9999999-aaaa-aaaa-9999-99999999999b"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = (byte)3,
                            OrderedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TableId = new Guid("22222222-aaaa-aaaa-aaaa-222222222222"),
                            TotalMoney = 150.0
                        });
                });

            modelBuilder.Entity("Cafe.Domain.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9999999-aaaa-aaaa-9999-99999999999c"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemNotes = "No onions",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = new Guid("a9999999-aaaa-aaaa-9999-99999999999a"),
                            ProductId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Quantity = 2,
                            UnitPrice = 25.0
                        },
                        new
                        {
                            Id = new Guid("d9999999-aaaa-aaaa-9999-99999999999d"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemNotes = "Extra cheese",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = new Guid("b9999999-aaaa-aaaa-9999-99999999999b"),
                            ProductId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Quantity = 3,
                            UnitPrice = 50.0
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RemainInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("Name");

                    b.HasIndex("IsAvailable", "Category");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Category = (byte)0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            MenuId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burger",
                            Price = 25.0,
                            RemainInStock = 0
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Category = (byte)0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            MenuId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pizza",
                            Price = 50.0,
                            RemainInStock = 0
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(265)
                        .HasColumnType("nvarchar(265)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Address = "789 Supplier Ave",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fresh Foods Co.",
                            phone = "01234567890"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Address = "1010 Market St",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Quality Supplies Ltd.",
                            phone = "01123456789"
                        });
                });

            modelBuilder.Entity("Cafe.Domain.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Capacity")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(46)
                        .HasColumnType("nvarchar(46)");

                    b.Property<byte>("TableStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("TableStatus");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            Capacity = (byte)4,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableName = "Table 1",
                            TableStatus = (byte)1
                        },
                        new
                        {
                            Id = new Guid("22222222-aaaa-aaaa-aaaa-222222222222"),
                            Capacity = (byte)6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableName = "Table 2",
                            TableStatus = (byte)2
                        });
                });

            modelBuilder.Entity("Cafe.Domain.BranchSupplier", b =>
                {
                    b.HasOne("Cafe.Domain.Branch", "Branch")
                        .WithMany("BranchSuppliers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Domain.Supplier", "Supplier")
                        .WithMany("BranchSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Cafe.Domain.Employee", b =>
                {
                    b.HasOne("Cafe.Domain.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Cafe.Domain.Order", b =>
                {
                    b.HasOne("Cafe.Domain.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Domain.OrderItem", b =>
                {
                    b.HasOne("Cafe.Domain.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Domain.Product", "Product")
                        .WithOne("OrderItem")
                        .HasForeignKey("Cafe.Domain.OrderItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Cafe.Domain.Product", b =>
                {
                    b.HasOne("Cafe.Domain.Menu", "Menu")
                        .WithMany("Products")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Cafe.Domain.Branch", b =>
                {
                    b.Navigation("BranchSuppliers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Cafe.Domain.Menu", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Cafe.Domain.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Cafe.Domain.Product", b =>
                {
                    b.Navigation("OrderItem")
                        .IsRequired();
                });

            modelBuilder.Entity("Cafe.Domain.Supplier", b =>
                {
                    b.Navigation("BranchSuppliers");
                });

            modelBuilder.Entity("Cafe.Domain.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
